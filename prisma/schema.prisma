generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                 String               @id @default(cuid())
  name               String
  slug               String               @unique
  emailPrefix        String               @unique @map("email_prefix")
  plan               String               @default("free")
  taskLimit          Int                  @default(100) @map("task_limit")
  tasksCreated       Int                  @default(0) @map("tasks_created")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  monthlyResetDate   DateTime             @default(now()) @map("monthly_reset_date")
  monthlyTasksUsed   Int                  @default(0) @map("monthly_tasks_used")
  allowedEmails      AllowedEmail[]
  apiKeys            ApiKey[]
  emailLogs          EmailLog[]
  members            OrganizationMember[]
  senderIntelligence SenderIntelligence[]
  tasks              Task[]
  invitations        Invitation[]

  @@map("organizations")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  name                  String?
  password              String?
  emailVerified         DateTime?            @map("email_verified")
  image                 String?
  phoneNumber           String?              @map("phone_number")
  whatsappEnabled       Boolean              @default(false) @map("whatsapp_enabled")
  whatsappVerified      Boolean              @default(false) @map("whatsapp_verified")
  notificationType      String               @default("email") @map("notification_type")
  digestTime            String               @default("08:00") @map("digest_time")
  timezone              String               @default("America/New_York") @map("timezone")
  emailDigestEnabled    Boolean              @default(true) @map("email_digest_enabled")
  smsDigestEnabled      Boolean              @default(false) @map("sms_digest_enabled")
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @updatedAt @map("updated_at")
  calendarAutoPush      Boolean              @default(false) @map("calendar_auto_push")
  calendarDefaultId     String?              @map("calendar_default_id")
  calendarProvider      String?              @map("calendar_provider")
  googleRefreshToken    String?              @map("google_refresh_token")
  microsoftRefreshToken String?              @map("microsoft_refresh_token")
  discordConnected      DateTime?            @map("discord_connected")
  discordId             String?              @unique @map("discord_id")
  discordUsername       String?              @map("discord_username")
  discordDigestEnabled  Boolean              @default(false) @map("discord_digest_enabled")
  discordUserId         String?              @map("discord_user_id")
  discordDMEnabled      Boolean              @default(true) @map("discord_dm_enabled")
  discordDMError        String?              @map("discord_dm_error")
  welcomeDismissed      Boolean              @default(false) @map("welcome_dismissed")
  welcomeDismissedAt    DateTime?            @map("welcome_dismissed_at")
  currentOrganizationId String?              @map("current_organization_id")
  accounts              Account[]
  allowedEmails         AllowedEmail[]
  apiKeys               ApiKey[]
  organizations         OrganizationMember[]
  sessions              Session[]
  taskActivities        TaskActivity[]
  tasksAssigned         Task[]               @relation("AssignedTo")
  tasksCreated          Task[]               @relation("CreatedBy")
  invitationsSent       Invitation[]

  @@map("users")
}

model OrganizationMember {
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  role           String       @default("member")
  joinedAt       DateTime     @default(now()) @map("joined_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([organizationId, userId])
  @@map("organization_members")
}

model Invitation {
  id             String       @id @default(cuid())
  token          String       @unique @default(cuid())
  email          String
  organizationId String       @map("organization_id")
  role           String       @default("member")
  invitedById    String       @map("invited_by_id")
  expiresAt      DateTime     @map("expires_at")
  usedAt         DateTime?    @map("used_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      User         @relation(fields: [invitedById], references: [id])

  @@index([email])
  @@index([token])
  @@map("invitations")
}

model Task {
  id                 String         @id @default(cuid())
  organizationId     String         @map("organization_id")
  title              String
  description        String?
  status             String         @default("todo")
  priority           String         @default("medium")
  dueDate            DateTime?      @map("due_date")
  reminderDate       DateTime?      @map("reminder_date")
  reminderSent       Boolean        @default(false) @map("reminder_sent")
  assignedToId       String?        @map("assigned_to_id")
  createdById        String?        @map("created_by_id")
  createdVia         String         @default("email") @map("created_via")
  emailMetadata      Json?          @map("email_metadata")
  emailThreadId      String?        @map("email_thread_id")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  assignedByEmail    String?        @map("assigned_by_email")
  assignedToEmail    String?        @map("assigned_to_email")
  stakeholders       Json?
  taskType           String?        @map("task_type")
  userRole           String?        @map("user_role")
  visibility         String         @default("private") // 'private', 'assigned', 'shared', 'team'
  sharedWith         String[]       @default([]) @map("shared_with") // Array of user IDs who can see the task
  externalCalendarId String?        @map("external_calendar_id")
  externalEventId    String?        @map("external_event_id")
  externalProvider   String?        @map("external_provider")
  lastCalendarSyncAt DateTime?      @map("last_calendar_sync_at")
  emailLogs          EmailLog[]
  activities         TaskActivity[]
  reminders          TaskReminder[]
  assignedTo         User?          @relation("AssignedTo", fields: [assignedToId], references: [id])
  createdBy          User?          @relation("CreatedBy", fields: [createdById], references: [id])
  organization       Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([status])
  @@index([assignedToId])
  @@index([assignedToEmail])
  @@index([assignedByEmail])
  @@index([taskType])
  @@index([emailThreadId])
  @@index([reminderDate])
  @@index([dueDate])
  @@index([externalProvider])
  @@index([externalEventId])
  @@index([visibility])
  @@index([createdById])
  @@index([sharedWith])
  @@map("tasks")
}

model TaskActivity {
  id         String    @id @default(cuid())
  taskId     String    @map("task_id")
  type       String
  content    String?
  metadata   Json?
  emailLogId String?   @map("email_log_id")
  userId     String?   @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  emailLog   EmailLog? @relation(fields: [emailLogId], references: [id])
  task       Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([emailLogId])
  @@map("task_activities")
}

model EmailLog {
  id             String         @id @default(cuid())
  organizationId String         @map("organization_id")
  fromEmail      String         @map("from_email")
  toEmail        String         @map("to_email")
  subject        String
  processed      Boolean        @default(false)
  taskId         String?        @map("task_id")
  rawData        Json           @map("raw_data")
  error          String?
  messageId      String?        @map("message_id")
  inReplyTo      String?        @map("in_reply_to")
  threadId       String?        @map("thread_id")
  senderAllowed  Boolean        @default(false) @map("sender_allowed")
  createdAt      DateTime       @default(now()) @map("created_at")
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  task           Task?          @relation(fields: [taskId], references: [id])
  activities     TaskActivity[]

  @@index([organizationId])
  @@index([processed])
  @@index([messageId])
  @@index([threadId])
  @@index([taskId])
  @@map("email_logs")
}

model ApiKey {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  name           String
  keyHash        String       @unique @map("key_hash")
  lastUsed       DateTime?    @map("last_used")
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([keyHash])
  @@map("api_keys")
}

model TaskReminder {
  id           String    @id @default(cuid())
  taskId       String    @map("task_id")
  reminderDate DateTime  @map("reminder_date")
  recurring    String?
  sent         Boolean   @default(false)
  sentAt       DateTime? @map("sent_at")
  metadata     Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  task         Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([reminderDate])
  @@index([sent])
  @@map("task_reminders")
}

model AllowedEmail {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  email          String
  addedById      String?      @map("added_by_id")
  note           String?
  createdAt      DateTime     @default(now()) @map("created_at")
  addedBy        User?        @relation(fields: [addedById], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([email])
  @@map("allowed_emails")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@index([email])
  @@map("password_reset_tokens")
}

model SenderIntelligence {
  id              String       @id @default(cuid())
  organizationId  String       @map("organization_id")
  senderEmail     String       @map("sender_email")
  totalEmails     Int          @default(0) @map("total_emails")
  tasksCreated    Int          @default(0) @map("tasks_created")
  avgPriority     Float        @default(50) @map("avg_priority")
  avgResponseTime Float        @default(24) @map("avg_response_time")
  completionRate  Float        @default(0.8) @map("completion_rate")
  patterns        Json         @default("{}")
  lastInteraction DateTime     @map("last_interaction")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, senderEmail])
  @@index([organizationId])
  @@index([senderEmail])
  @@map("sender_intelligence")
}

model ShortLink {
  id          String   @id @default(cuid())
  shortCode   String   @unique
  originalUrl String
  clicks      Int      @default(0)
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@index([expiresAt])
  @@map("short_links")
}

model DiscordJob {
  messageId      String    @id @map("message_id")
  organizationId String    @map("organization_id")
  status         String    @default("processing")
  createdAt      DateTime  @default(now()) @map("created_at")
  finishedAt     DateTime? @map("finished_at")
  meta           Json      @default("{}")

  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@index([finishedAt])
  @@map("discord_jobs")
}

model DiscordProcessedMessage {
  messageId String   @id @map("message_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@map("discord_processed_messages")
}
